Android provides two ways of doing navigation:
	1. Using activities. In this scheme, your code launches new activity to move forward. User clicks the back button to move back in the stack.
	2. Using fragment backstack. In this scheme, you push a new fragment to an activity's back stack to go forward. User clicks the back button to pop the current fragment and move back to the previous fragment.

The fragment based approach works faster since new activities are not 
created and destroyed as you move forward and backward respectively. 
This approach also closely resembles the way iOS UINavigationController works. 

The purpose of this library is to fill in a few holes in Google's 
implementation of fragment based navigation. These missing features are:
	- Show an Up button on top left corner of the action bar if back stack has at least one fragment.
	- Pop the stack when the Up button is clicked.
	- Change the title shown on the action bar based on the fragment that is at the top of the stack.

To create a fragment class, extend NavigationFragment. 

public class PageA extends NavigationFragment {
        public PageA() {
                setTitle("Page A");
        }
	public View onCreateView(...) {
		...
	}
}

Here, we set the title of the fragment to "Page A". Whenever this fragment is
shown at the top of the stack, this title will be displayed on the action bar.

The activity class must extend NavigationActivity. The onCreate() method
of NavigationActivity takes the root fragment of the navigation.

public class MainActivity extends NavigationActivity {
        @Override
        protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState, new PageA());
        }
}

To push a new fragment to the top of the stack, call 
pushFragment(NavigationFragment f) of the NavigationActivity class. 
A fragment can obtain it's parent NavigationActivity by calling 
getNavigationActivity() of NavigationFragment.
